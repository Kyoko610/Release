+func initDONL(u: \main@UNIT)
	do u.kind :: %enemy
	do u.u :: 89500.0
	do u.g :: "efl1.png"
	do u.a :: 40
	do u.kai :: 10.0
	do u.setWH()
	do u.x :: -u.w
	do u.y :: 0.0
	do u.hp :: 20.0
	do u.df2 :: 999.0
	;do u.setAtari(u.w / 2.0, u.h / 2.0, u.w / 2.0 * 0.3)
	do u.setAtari2(280.0, 300.0, 120.0)
	do u.color :: 2
	do u.vx :: 5.0
	do \main@sndd(42)
end func
+func actDONL(u: \main@UNIT)
	do u.cnt2 :+ 1
	if(u.cnt2 > 1)
		switch(u.g)
		case "efl1.png"
			do u.g :: "efl2.png"
		default
			do u.g :: "efl1.png"
		end switch
		do u.cnt2 :: 0
	end if
	switch(u.mode)
	case 0
		if(u.x > -200.0)
			do u.x :: -200.0
			do u.vx :: 0.0
			do u.incMode()
		end if
	case 1
		do u.loop1(10)
	case 2
		var oo: \main@UNIT :: u.cObj("BAZUB")
		do oo.x :: u.x + 300.0
		do oo.y :: u.y + 220.0
		do u.child :: oo
		do u.incMode()
	case 3
		if(u.child.d = true)
			do u.vx :: 1.0
			do u.incMode()
		end if
	case 4
		do u.loop1(1)
	case 5
		do u.vx :: 8.0
		do u.incMode()
	default
		do u.moveRight(1400.0)
	end switch
end func


+func initBUZ(u: \main@UNIT)
	do u.u :: -1000.0
	do u.a :: 60
	do u.kai :: 0.0
	do u.g :: "edm1.png"
	do u.setWH()
	do u.setAtari(u.w / 2.0, u.h / 2.0, u.w / 2.0 * 0.60)
	do u.bomb :: true
	do \main@sndd(10)
end func
+func actBUZ(u: \main@UNIT)
	switch(u.g)
	case "edm1.png"
		do u.g :: "edm2.png"
	default
		do u.g :: "edm1.png"
	end switch
	switch(u.mode)
	case 0
		do u.vx :: 10.0
		do u.vy :: 2.0
		do u.incMode()
	default
		do u.moveRight(1400.0)
	end switch
end func



+func initDONR(u: \main@UNIT)
	do u.kind :: %enemy
	do u.u :: 89500.0
	do u.g :: "efr1.png"
	do u.a :: 40
	do u.kai :: 10.0
	do u.setWH()
	do u.x :: 1280.0
	do u.y :: 0.0
	do u.hp :: 20.0
	;do u.setAtari(u.w / 2.0, u.h / 2.0, u.w / 2.0 * 0.3)
	do u.setAtari2(280.0, 300.0, 120.0)
	do u.color :: 2
	do u.vx :: -10.0
	do u.df2 :: 999.0
	do \main@sndd(42)
end func
+func actDONR(u: \main@UNIT)
	do u.cnt2 :+ 1
	if(u.cnt2 > 1)
		switch(u.g)
		case "efr1.png"
			do u.g :: "efr2.png"
		default
			do u.g :: "efr1.png"
		end switch
		do u.cnt2 :: 0
	end if
	switch(u.mode)
	case 0
		if(u.x < 50.0)
			do u.x :: 50.0
			do u.vx :: 0.0
			do u.incMode()
		end if
	case 1
		do u.loop1(1)
	case 2
		var oo: \main@UNIT :: u.cObj("BAZUB")
		do oo.x :: u.x + 300.0
		do oo.y :: u.y + 220.0
		do u.child :: oo
		do u.incMode()
	case 3
		if(u.child.d = true)
			do u.vx :: -1.0
			do u.incMode()
		end if
	case 4
		do u.loop1(10)
	case 5
		do u.vx :: -10.0
		do u.incMode()
	default
		do u.moveLeft(-u.w - 2.0)
	end switch
end func
