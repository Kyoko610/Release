+func init(u: \main@UNIT)
	do u.u :: 80001.0
	do u.a :: 40
	do u.g :: "landsubmarinA1.png"
	do u.setWH()
	do u.x :: -500.0
	do u.y :: 500.0
	do u.mhp :: 750.0
	do u.hp :: u.mhp
	do u.df1 :: 0.0
	do u.df2 :: 0.0
	do u.df3 :: 0.0
	do u.df4 :: 0.0
	
	
	do u.gai :: true
	do u.boss :: true
	;do \main@bgmchg("boss1", 1)
	do \main@oBOSS :: u
	do \main@cObj("HPBARE")
	do \main@cObj("HPBARE2")
	do \main@cObj("HPBARGE")
	do u.oto :: true
end func


enum subm
	Up1
	Open1
	Mis1
	stop1
	right1
	BALL
	Open2
	Mis2
	Open3
	left1
	wait
	mae1
	mae2
	wait2
	rightA
	wait3
	rightB
	wait4
	rightC
	wait5
end enum


+func act(u: \main@UNIT)
	switch(u.mode)
	case %Up1 $ @subm $ int, %right1 $ @subm $ int,
		|%BALL $ @subm $ int, %left1 $ @subm $ int,
		|%wait $ @subm $ int, %mae1 $ @subm $ int, %mae2 $ @subm $ int,
		|%wait2 $ @subm $ int
		if(u.g = "landsubmarinA1.png")
			do u.g :: "landsubmarinA2.png"
		else
			do u.g :: "landsubmarinA1.png"
		end if
	case %Open1 $ @subm $ int, %Mis1 $ @subm $ int
		do u.cnt3 :+ 1
		if(u.cnt3 > 10)
			switch(u.g)
			case "landsubmarinM11.png"
				do u.g :: "landsubmarinM12.png"
			case "landsubmarinM12.png"
				do u.g :: "landsubmarinM13.png"
			case "landsubmarinM13.png"
				do u.g :: "landsubmarinM14.png"
			case "landsubmarinM14.png"
				do u.g :: "landsubmarinM15.png"
			case "landsubmarinM15.png"
				do u.g :: "landsubmarinM16.png"
			case "landsubmarinM16.png"
			default
				do u.g :: "landsubmarinM11.png"
			end switch
			do u.cnt3 :: 0
		end if
	case %stop1 $ @subm $ int
		do u.cnt3 :+ 1
		if(u.cnt3 > 10)
			switch(u.g)
			case "landsubmarinA1.png"
			case "landsubmarinM11.png"
				do u.g :: "landsubmarinA1.png"
			case "landsubmarinM12.png"
				do u.g :: "landsubmarinM11.png"
			case "landsubmarinM13.png"
				do u.g :: "landsubmarinM12.png"
			case "landsubmarinM14.png"
				do u.g :: "landsubmarinM13.png"
			case "landsubmarinM15.png"
				do u.g :: "landsubmarinM14.png"
			case "landsubmarinM16.png"
				do u.g :: "landsubmarinM15.png"
			case "landsubmarinM16.png"
				do u.g :: "landsubmarinM16.png"
			end switch
			do u.cnt3 :: 0
		end if
	case %Open2 $ @subm $ int, %Mis2 $ @subm $ int
		do u.cnt3 :+ 1
		if(u.cnt3 > 10)
			switch(u.g)
			case "landsubmarinM21.png"
				do u.g :: "landsubmarinM22.png"
			case "landsubmarinM22.png"
				do u.g :: "landsubmarinM23.png"
			case "landsubmarinM23.png"
				do u.g :: "landsubmarinM24.png"
			case "landsubmarinM24.png"
				do u.g :: "landsubmarinM25.png"
			case "landsubmarinM25.png"
				do u.g :: "landsubmarinM26.png"
			case "landsubmarinM26.png"
			default
				do u.g :: "landsubmarinM21.png"
			end switch
			do u.cnt3 :: 0
		end if
	case %Open2 $ @subm $ int
		do u.cnt3 :+ 1
		if(u.cnt3 > 10)
			switch(u.g)
			case "landsubmarinM21.png"
			case "landsubmarinM22.png"
				do u.g :: "landsubmarinM21.png"
			case "landsubmarinM23.png"
				do u.g :: "landsubmarinM22.png"
			case "landsubmarinM24.png"
				do u.g :: "landsubmarinM23.png"
			case "landsubmarinM25.png"
				do u.g :: "landsubmarinM24.png"
			case "landsubmarinM26.png"
				do u.g :: "landsubmarinM25.png"
			default
				do u.g :: "landsubmarinM26.png"
			end switch
			do u.cnt3 :: 0
		end if
	case %rightA $ @subm $ int,
		|%wait3 $ @subm $ int,
		|%rightB $ @subm $ int,
		|%wait4 $ @subm $ int,
		|%rightC $ @subm $ int,
		|%wait5 $ @subm $ int
		;do u.cnt3 :+ 1
		;if(u.cnt3 > 3)
		switch(u.g)
		case "landsubmarinB1.png"
			do u.g :: "landsubmarinB2.png"
		default
			do u.g :: "landsubmarinB1.png"
		end switch
		;do u.cnt3 :: 0
		;	end if
	end switch
	
	if(\main@snd[41].playing() = false)
		do \main@sndd(41)
	end if
	switch(u.mode)
	case %Up1 $ @subm $ int
		if(u.kinit = 0)
			do u.vx :: 0.0
			do u.vy :: -4.0
			do u.kinit :: 1
		end if
		do u.moveUp(0.0)
	case %Open1 $ @subm $ int
		if(u.kinit = 0)
			do u.kinit :: 1
			do u.setAtari2(670.0, 470.0, 250.0)
		end if
		do u.loop1(50)
	case %Mis1 $ @subm $ int
		switch(u.kinit)
		case 0
			do u.vx :: 4.0
			do u.vy :: 0.0
			do u.kinit :: 1
			do u.cnt4 :: 0
			do u.cnt2 :: 0
		case 1
			if(u.x > -200.0)
				;-200.0
				do u.x :: -200.0
				do u.vx :: -6.0
				do u.vy :: 0.0
				do u.kinit :: 2
			end if
		case 2
			if(u.x < -900.0)
				;-500.0
				do u.x :: -900.0
				do u.vx :: 6.0
				do u.vy :: 0.0
				do u.kinit :: 1
			end if
		end switch
		do u.cnt4 :+ 1
		if(u.cnt4 > 100)
			do u.cnt2 :+ 1
			if(u.cnt2 > 2)
				do u.incMode()
			end if
			do u.cnt4 :: 0
			do \main@cObj("ABOSSS_2")
		end if
	case %stop1 $ @subm $ int
		do u.vx :: 0.0
		do u.vy :: 0.0
		do u.loop1(80)
	case %right1 $ @subm $ int
		if(u.kinit = 0)
			do u.vx :: 4.0
			do u.vy :: 0.0
			do u.kinit :: 1
		end if
		do u.moveRight(-100.0)
	case %BALL $ @subm $ int
		if(u.kinit = 0)
			do u.kinit :: 1
			do u.child :: \main@cObj("ABOSSS_3")
		end if
		if(u.child =& null | u.child.d = true)
			do u.incMode()
		end if
	case %Open2 $ @subm $ int
		do u.loop1(50)
	case %Mis2 $ @subm $ int
		if(u.kinit = 0)
			do u.kinit :: 1
			do u.cnt2 :: 0
			do u.cnt4 :: 0
		end if
		do u.cnt4 :+ 1
		if(u.cnt4 > 40)
			var o: \main@UNIT :: \main@cObj("ABOSSS_4")
			do o.x :: 50.0 * u.cnt2 $ float - 90.0
			do u.cnt2 :+ 1
			if(u.cnt2 > 3)
				do u.incMode()
			end if
			do u.cnt4 :: 0
		end if
	case %Open3 $ @subm $ int
		do u.loop1(50)
	case %left1 $ @subm $ int
		if(u.kinit = 0)
			do u.vx :: -4.0
			do u.vy :: 0.0
			do u.kinit :: 1
		end if
		do u.moveLeft(-500.0)
	case %wait $ @subm $ int
		do u.loop1(50)
	case %mae1 $ @subm $ int
		if(u.kinit = 0)
			do \main@sndd(44)
			do u.vx :: 0.0
			do u.vy :: -4.0
			do u.kinit :: 1
		end if
		do u.moveUp(-300.0)
	case %mae2 $ @subm $ int
		if(u.kinit = 0)
			do u.u :: -100.0
			do u.vx :: 0.0
			do u.vy :: 8.0
			do u.kinit :: 1
			do u.setAtari(985.0, 430.0, 170.0)
		end if
		do u.moveDown(0.0)
	case %wait2 $ @subm $ int, %wait3 $ @subm $ int, %wait4 $ @subm $ int, %wait5 $ @subm $ int
		do u.loop1(50)
	case %rightA $ @subm $ int
		if(\main@snd[90].playing() = false)
			do \main@sndd(90)
		end if
		if(u.kinit = 0)
			do \main@sndd(44)
			do u.vx :: 1.0
			do u.vy :: 0.0
			do u.kinit :: 1
		end if
		do u.moveRightK(1280.0, 1.0, 30.0)
	case %rightB $ @subm $ int, %rightC $ @subm $ int
		if(\main@snd[90].playing() = false)
			do \main@sndd(90)
		end if
		if(u.kinit = 0)
			do \main@sndd(44)
			do u.x :: -u.w
			do u.vx :: 1.0
			do u.vy :: 0.0
			do u.kinit :: 1
		end if
		do u.moveRightK(1280.0, 1.0, 30.0)
	default
		do u.x :: -500.0
		do u.y :: 500.0
		do u.u :: 80000.0
		do u.atari :: null
		do \main@snd[90].stop()
		do u.incMode()
		do u.mode :: 0
	end switch
end func



+func initM1(u: \main@UNIT)
	do u.u :: -1000.0
	do u.a :: 30
	do u.kai :: 0.0
	do u.g :: "bosssONm2_1.png"
	do u.setWH()
	if(\main@oBOSS =& null)
		do u.d :: true
		ret
	end if
	do u.x :: \main@oBOSS.x + 408.0
	do u.y :: \main@oBOSS.y + 153.0
	do u.vx :: 0.0
	do u.vy :: lib@rnd(-2, 1) $ float
	do u.df1 :: 0.0
	do u.df2 :: 0.0
	do u.setAtari(u.w / 2.0 + 100.0, u.h / 2.0, u.w / 2.0 * 0.3)
	do u.boss :: true
	do u.mode :: 0
	do u.bomb :: true
	do u.cnt :: 0
	do \main@sndd(10)
end func
+func actM1(u: \main@UNIT)
	do u.cnt :+ 1
	if(u.vx < 20.0)
		do u.vx :+ 0.5
	else
		do u.vx :: 20.0
	end if
	if(u.cnt % 2 = 0)
		if(u.g = "bosssONm2_1.png")
			do u.g :: "bosssONm2_2.png"
		else
			do u.g :: "bosssONm2_1.png"
		end if
	end if
end func

+func initMB(u: \main@UNIT)
	do u.u :: -1000.0
	do u.a :: 30
	do u.kai :: 0.0
	do u.g :: "bosssONBd_1.png"
	do u.setWH()
	if(\main@oBOSS =& null)
		do u.d :: true
		ret
	end if
	do u.x :: \main@oBOSS.x + 442.0
	do u.y :: \main@oBOSS.y + 233.0
	do u.vx :: 10.0
	do u.df1 :: 0.0
	do u.df2 :: 0.0
	do u.setAtari(u.w / 2.0, u.h / 2.0, u.w / 2.0 * 0.6)
	do u.boss :: true
	do u.mode :: 0
	do u.jS :: -18.0
	do u.jKasoku :: 0.2
	do u.cnt :: 0
	do u.cnt2 :: 0
	do \main@sndd(14)
end func
+func actMB(u: \main@UNIT)
	if(\main@oBOSS =& null | \main@oBOSS.d = true)
		do \main@sndd(40)
		do u.vx :: 0.0
		do u.vy :: 0.0
		do u.kie :: true
		do u.f :: \main@KIE
		ret
	end if
	do u.cnt2 :+ 1
	if(u.cnt2 >= 40)
		do u.cnt2 :: 0
	elif(u.cnt2 > 30)
		do u.g :: "bosssONBd_2.png"
	elif(u.cnt2 > 20)
		do u.g :: "bosssONBd_3.png"
	elif(u.cnt2 > 10)
		do u.g :: "bosssONBd_2.png"
	else
		do u.g :: "bosssONBd_1.png"
	end if
	do u.y :+ u.jS
	do u.jS :+ u.jKasoku
	do u.jKasoku :+ 0.02
	if(u.x + u.w > 1280.0)
		do u.x :: 1280.0 - u.w
		do u.vx :: -u.vx
		do \main@sndd(15)
	elif(u.x < 0.0)
		do u.x :: 0.0
		do u.vx :: -u.vx
		do \main@sndd(15)
	elif(u.y + u.h > 720.0)
		do u.y :: 720.0 - u.h
		do u.jS :: -18.0
		do u.jKasoku :: 0.02
		do u.cnt :+ 1
		do \main@sndd(15)
	end if
	if(u.cnt > 6)
		do \main@sndd(40)
		do u.kie :: true
		do u.vx :: 0.0
		do u.vy :: 0.0
		do u.f :: \main@KIE
	end if
end func
+func initMBB(u: \main@UNIT)
	do u.u :: 80000.0
	do u.a :: 30
	do u.kai :: 0.0
	do u.g :: "bosssONm_1.png"
	do u.setWH()
	if(\main@oBOSS =& null)
		do u.d :: true
		ret
	end if
	;do u.x :: \main@oBOSS.x + 368.0
	do u.y :: \main@oBOSS.y + 108.0
	
	do u.vx :: 0.0
	do u.vy :: 0.0
	do u.df1 :: 0.0
	do u.df2 :: 0.0
	do u.boss :: true
	do u.mode :: 0
	;do u.bomb :: true
	do u.gai :: true
	do u.cnt :: 0
end func
+func actMBB(u: \main@UNIT)
	do u.cnt :+ 1
	switch(u.mode)
	case 0
		if(u.cnt2 = 1)
			do u.vy :: -10.0
		else
			do u.vy :: -15.0
		end if
		do \main@sndd(10)
		do u.mode :+ 1
	case 1
		if(u.cnt % 2 = 0)
			if(u.g = "bosssONm_1.png")
				do u.g :: "bosssONm_2.png"
			else
				do u.g :: "bosssONm_1.png"
			end if
		end if
		if(u.y < -u.h)
			do u.u :: -1000.0
			if(u.cnt2 = 1)
				do u.vy :: 10.0
			else
				do u.vy :: 15.0
			end if
			if(\main@oMy =& null)
				do u.x :: 600.0
			else
				do u.x :: \main@oMy.x + 168.0
			end if
			do u.g :: "bosssONm_3.png"
			do u.cnt :: 0
			do u.mode :+ 1
		end if
	case 2
		if(u.cnt % 2 = 0)
			if(u.g = "bosssONm_3.png")
				do u.g :: "bosssONm_4.png"
			else
				do u.g :: "bosssONm_3.png"
			end if
		end if
		if(u.y > 100.0)
			do u.u :: 900.0
			do u.mode :+ 1
			do u.vy :: 0.0
			do u.cnt :: 0
			do u.setAtari(u.w / 2.0, u.h / 2.0 + 120.0, u.w / 2.0 * 0.3)
			do \main@sndd(11)
		end if
	case 3
		do u.cnt :+ 1
		if(u.cnt < 10)
			do u.g :: "bosssONB_1.png"
		elif(u.cnt < 20)
			do u.g :: "bosssONB_2.png"
		else
			do u.g :: "bosssONB_3.png"
		end if
		if(u.cnt > 40)
			do u.d :: true
		end if
	end switch
end func
